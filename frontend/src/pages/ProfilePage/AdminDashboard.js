import React, { useEffect, useState } from "react";
import "./AdminDashboard.css";
import { api } from "../../api";

function AdminDashboard() {
  const [users, setUsers] = useState([]);
  const [roleRequests, setRoleRequests] = useState([]);
  const [showRoleRequests, setShowRoleRequests] = useState(false);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const [usersRes, roleRequestsRes] = await Promise.all([
          api.get("/users"),
          api.get("/borrowings-to-role")
        ]);
        setUsers(usersRes.data);
        setRoleRequests(roleRequestsRes.data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    };

    fetchData();
  }, []);

  const getUserName = (userId) => {
    const user = users.find(u => u.user_id === userId);
    return user ? `${user.first_name} ${user.last_name}` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
  };

  const handleRoleDecision = async (roleReservationId, decision) => {
    try {
      const request = roleRequests.find(r => r.role_reservation_id === roleReservationId);
      if (!request) {
        console.error("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return;
      }

      if (decision === true) {
        await api.put(`/users/${request.user_id}`, {
          role_id: 2 // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ role_id=2 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è
        });
        localStorage.setItem("role", "librarian");
      }

      await api.put(`/borrowings-to-role/${roleReservationId}`, {
        res_answer_to_request: decision,
        date_answer_to_request: new Date().toISOString().slice(0, 16),
      });

      setRoleRequests(prev =>
        prev.map(r =>
          r.role_reservation_id === roleReservationId
            ? { 
                ...r, 
                res_answer_to_request: decision, 
                date_answer_to_request: new Date().toISOString() 
              }
            : r
        )
      );

      if (decision === true) {
        const updatedUser = users.find(u => u.user_id === request.user_id);
        if (updatedUser) {
          setUsers(prev =>
            prev.map(u =>
              u.user_id === request.user_id
                ? { ...u, role_id: 2 }
                : u
            )
          );
        }
      }

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è:", error);
      alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
    }
  };

  const renderRoleStatus = (status) => {
    if (status === true) return "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ";
    if (status === false) return "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ";
    return "üïí –û–∂–∏–¥–∞–µ—Ç";
  };

  return (
    <div className="admin-dashboard">
      <h2>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h2>

      <div className="role-requests-section">
        <h3>–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è</h3>
        <button
          className="toggle-button"
          onClick={() => setShowRoleRequests(!showRoleRequests)}
        >
          {showRoleRequests ? "–°–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª–∏" : "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–æ–ª–∏"}
        </button>

        {showRoleRequests && (
          roleRequests.length === 0 ? (
            <p>–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–æ–ª—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—è.</p>
          ) : (
            <ul className="role-request-list">
              {roleRequests.map((req) => {
                const statusClass = req.res_answer_to_request === true
                  ? "approved"
                  : req.res_answer_to_request === false
                  ? "rejected"
                  : "pending";

                return (
                  <li key={req.role_reservation_id} className={`role-request-item ${statusClass}`}>
                    <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {getUserName(req.user_id)}</p>
                    <p><strong>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</strong> {new Date(req.date_request_from).toLocaleString()}</p>
                    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> {renderRoleStatus(req.res_answer_to_request)}</p>
                    {req.res_answer_to_request === null && (
                      <div className="decision-buttons">
                        <button onClick={() => handleRoleDecision(req.role_reservation_id, true)}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                        <button onClick={() => handleRoleDecision(req.role_reservation_id, false)}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                      </div>
                    )}
                  </li>
                );
              })}
            </ul>
          )
        )}
      </div>
    </div>
  );
}

export default AdminDashboard;