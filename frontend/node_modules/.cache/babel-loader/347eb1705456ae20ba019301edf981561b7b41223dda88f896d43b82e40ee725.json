{"ast":null,"code":"import axios from 'axios';\n\n// src/api/index.js (полный мок-реализация)\nconst mockBooks = [{\n  id: 1,\n  title: \"Обломов\",\n  author: \"Иван Гончаров\",\n  coverImage: \"/images/book-covers/oblomov.jpg\",\n  // Убедитесь, что файл существует в public/images/\n  year: 2023,\n  publish: \"Издательство 'Эксмо'\",\n  isbn: \"978-5-04-193621-1\",\n  pages: 544,\n  description: \"Илья Ильич Обломов — типичный представитель русского дворянства XIX века, чья жизнь проходит в лени и мечтаниях.\"\n}, {\n  id: 2,\n  title: \"Преступление и наказание\",\n  author: \"Фёдор Достоевский\",\n  coverImage: \"/images/book-covers/crime.jpg\",\n  year: 2022,\n  publish: \"АСТ\",\n  isbn: \"978-5-17-148469-1\",\n  pages: 608,\n  description: \"Родион Раскольников, бедный студент, совершает убийство старухи-процентщицы, чтобы проверить свою теорию о «праве на преступление».\"\n}];\n\n// Имитация axios\nconst api = {\n  get: url => {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        // Имитация задержки сети\n        if (url === '/books') {\n          resolve({\n            data: mockBooks\n          });\n        } else if (url.startsWith('/books/')) {\n          const bookId = parseInt(url.split('/')[2]);\n          const book = mockBooks.find(book => book.id === bookId);\n          if (book) {\n            resolve({\n              data: book\n            });\n          } else {\n            reject({\n              response: {\n                status: 404\n              }\n            });\n          }\n        } else {\n          reject(new Error('Invalid API endpoint'));\n        }\n      }, 300); // Задержка 300 мс\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","mockBooks","id","title","author","coverImage","year","publish","isbn","pages","description","api","get","url","Promise","resolve","reject","setTimeout","data","startsWith","bookId","parseInt","split","book","find","response","status","Error"],"sources":["D:/3_курс/2_семестр/программная_инженерия/lib-serv/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// src/api/index.js (полный мок-реализация)\r\nconst mockBooks = [\r\n    {\r\n      id: 1,\r\n      title: \"Обломов\",\r\n      author: \"Иван Гончаров\",\r\n      coverImage: \"/images/book-covers/oblomov.jpg\", // Убедитесь, что файл существует в public/images/\r\n      year: 2023,\r\n      publish: \"Издательство 'Эксмо'\",\r\n      isbn: \"978-5-04-193621-1\",\r\n      pages: 544,\r\n      description: \"Илья Ильич Обломов — типичный представитель русского дворянства XIX века, чья жизнь проходит в лени и мечтаниях.\"\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Преступление и наказание\",\r\n      author: \"Фёдор Достоевский\",\r\n      coverImage: \"/images/book-covers/crime.jpg\",\r\n      year: 2022,\r\n      publish: \"АСТ\",\r\n      isbn: \"978-5-17-148469-1\",\r\n      pages: 608,\r\n      description: \"Родион Раскольников, бедный студент, совершает убийство старухи-процентщицы, чтобы проверить свою теорию о «праве на преступление».\"\r\n    }\r\n  ];\r\n  \r\n  // Имитация axios\r\n  const api = {\r\n    get: (url) => {\r\n      return new Promise((resolve, reject) => {\r\n        setTimeout(() => { // Имитация задержки сети\r\n          if (url === '/books') {\r\n            resolve({ data: mockBooks });\r\n          } \r\n          else if (url.startsWith('/books/')) {\r\n            const bookId = parseInt(url.split('/')[2]);\r\n            const book = mockBooks.find(book => book.id === bookId);\r\n            if (book) {\r\n              resolve({ data: book });\r\n            } else {\r\n              reject({ response: { status: 404 } });\r\n            }\r\n          }\r\n          else {\r\n            reject(new Error('Invalid API endpoint'));\r\n          }\r\n        }, 300); // Задержка 300 мс\r\n      });\r\n    }\r\n  };\r\n  \r\n  export default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAG,CACd;EACEC,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,SAAS;EAChBC,MAAM,EAAE,eAAe;EACvBC,UAAU,EAAE,iCAAiC;EAAE;EAC/CC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,sBAAsB;EAC/BC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE,GAAG;EACVC,WAAW,EAAE;AACf,CAAC,EACD;EACER,EAAE,EAAE,CAAC;EACLC,KAAK,EAAE,0BAA0B;EACjCC,MAAM,EAAE,mBAAmB;EAC3BC,UAAU,EAAE,+BAA+B;EAC3CC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE,mBAAmB;EACzBC,KAAK,EAAE,GAAG;EACVC,WAAW,EAAE;AACf,CAAC,CACF;;AAED;AACA,MAAMC,GAAG,GAAG;EACVC,GAAG,EAAGC,GAAG,IAAK;IACZ,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtCC,UAAU,CAAC,MAAM;QAAE;QACjB,IAAIJ,GAAG,KAAK,QAAQ,EAAE;UACpBE,OAAO,CAAC;YAAEG,IAAI,EAAEjB;UAAU,CAAC,CAAC;QAC9B,CAAC,MACI,IAAIY,GAAG,CAACM,UAAU,CAAC,SAAS,CAAC,EAAE;UAClC,MAAMC,MAAM,GAAGC,QAAQ,CAACR,GAAG,CAACS,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;UAC1C,MAAMC,IAAI,GAAGtB,SAAS,CAACuB,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACrB,EAAE,KAAKkB,MAAM,CAAC;UACvD,IAAIG,IAAI,EAAE;YACRR,OAAO,CAAC;cAAEG,IAAI,EAAEK;YAAK,CAAC,CAAC;UACzB,CAAC,MAAM;YACLP,MAAM,CAAC;cAAES,QAAQ,EAAE;gBAAEC,MAAM,EAAE;cAAI;YAAE,CAAC,CAAC;UACvC;QACF,CAAC,MACI;UACHV,MAAM,CAAC,IAAIW,KAAK,CAAC,sBAAsB,CAAC,CAAC;QAC3C;MACF,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACX,CAAC,CAAC;EACJ;AACF,CAAC;AAED,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}